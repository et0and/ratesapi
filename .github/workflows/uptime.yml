name: API Uptime Monitoring

on:
  schedule:
    - cron: '*/15 * * * *'  # Run every 15 minutes
  workflow_dispatch:  # Allow manual triggering

# Required permissions for creating issues and using labels
permissions:
  issues: write
  contents: read

jobs:
  check-endpoints:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm install axios

      - name: Check API Endpoints
        id: health-check
        run: |
          # Define endpoints to check
          declare -a endpoints=(
            "https://ratesapi.nz"
            "https://ratesapi.nz/api/v1/mortgage-rates"
            "https://ratesapi.nz/api/v1/personal-loan-rates"
            "https://ratesapi.nz/api/v1/car-loan-rates"
            "https://ratesapi.nz/api/v1/credit-card-rates"
            "https://ratesapi.nz/api/v1/mortgage-rates/institution:anz"
            "https://ratesapi.nz/api/v1/personal-loan-rates/institution:asb"
            "https://ratesapi.nz/api/v1/car-loan-rates/institution:asb"
            "https://ratesapi.nz/api/v1/credit-card-rates/issuer:amex"
            "https://ratesapi.nz/api/v1/doc"
          )
          
          # Track failed endpoints
          failed_endpoints=""
          status=0
          
          # Check each endpoint
          for endpoint in "${endpoints[@]}"; do
            echo "Checking $endpoint"
            
            response=$(node -e "
              const axios = require('axios');
              axios.get('$endpoint', { 
                headers: { 'User-Agent': 'RatesAPI-Monitor/1.0' }
              })
                .then(res => {
                  console.log(JSON.stringify({
                    status: res.status,
                    ok: res.status >= 200 && res.status < 300
                  }));
                  process.exit(0);
                })
                .catch(err => {
                  console.log(JSON.stringify({
                    status: err.response ? err.response.status : 0,
                    ok: false,
                    message: err.message
                  }));
                  process.exit(1);
                });
            " || echo '{"status":0,"ok":false,"message":"Request failed"}')
            
            # Parse response
            ok=$(echo $response | jq -r '.ok')
            
            if [[ "$ok" != "true" ]]; then
              status=1
              failed_endpoints+="- $endpoint\n"
              echo "‚ùå Failed: $endpoint"
            else
              echo "‚úÖ Success: $endpoint"
            fi
          done
          
          # Set output for other steps
          echo "FAILED_ENDPOINTS<<EOF" >> $GITHUB_ENV
          echo -e "$failed_endpoints" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Fail the job if any endpoint failed
          exit $status

      # No longer needed as we have a single notification step that handles everything
      
      - name: Create Issue and Notify Team
        if: ${{ failure() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const failedEndpoints = process.env.FAILED_ENDPOINTS || 'Unknown endpoints';
            const timestamp = new Date().toISOString();
            
            // Create a new issue with team members mentioned
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® API Endpoint(s) Down',
              body: `@${{ github.repository_owner }} One or more API endpoints failed health check.\n\nFailed endpoints:\n${failedEndpoints}\n\nTimestamp: ${timestamp}\n\n[View workflow run](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`,
              labels: ['incident', 'high-priority']
            });
            
            console.log(`Created issue #${issue.data.number}: ${issue.data.html_url}`);