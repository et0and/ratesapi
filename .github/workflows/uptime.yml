name: API Uptime Monitoring

on:
  schedule:
    - cron: "*/15 * * * *" # Run every 15 minutes
  workflow_dispatch: # Allow manual triggering

# Required permissions for creating issues and using labels
permissions:
  issues: write
  contents: read

jobs:
  check-endpoints:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Check API Endpoints
        id: health-check
        run: |
          # Ensure the script exists (optional but good practice)
          if [ ! -f bin/uptime-check.ts ]; then
            echo "Error: bin/uptime-check.ts not found!" >&2
            exit 1
          fi

          # Run the Bun script and capture its output and exit code
          # We assume the script prints failure details to stdout on non-zero exit
          script_output=$(bun run ./bin/uptime-check.ts)
          script_exit_code=$?

          # Display the captured script output in the workflow logs
          echo "--- Script Output --- "
          echo "$script_output"
          echo "--- End Script Output --- "

          # Check if the script failed (non-zero exit code)
          if [ $script_exit_code -ne 0 ]; then
            echo "Uptime check script failed with exit code $script_exit_code."
            # Set the failure details in GITHUB_ENV using the captured output
            echo "DETAILED_FAILED_ENDPOINTS<<EOF" >> $GITHUB_ENV
            # Ensure the captured output is correctly formatted, handle potential empty output
            if [ -n "$script_output" ]; then
              echo "$script_output" >> $GITHUB_ENV
            else
              echo "- Uptime check script failed, but produced no output." >> $GITHUB_ENV
            fi
            echo "EOF" >> $GITHUB_ENV
          fi

          # Propagate the script's exit code to determine the step's success/failure
          exit $script_exit_code

      - name: Create Issue and Notify Team
        if: steps.health-check.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const failedEndpoints = process.env.DETAILED_FAILED_ENDPOINTS || 'Unknown endpoint failures';
            const timestamp = new Date().toISOString();

            // Create a new issue with team members mentioned
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ API Endpoint(s) Down',
              body: `@${{ github.repository_owner }} One or more API endpoints failed health check.\\n\\nFailed endpoints:\\n${failedEndpoints}\\n\\nTimestamp: ${timestamp}\\n\\n[View workflow run](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`,
              labels: ['incident', 'high-priority']
            });

            console.log(`Created issue #${issue.data.number}: ${issue.data.html_url}`);
